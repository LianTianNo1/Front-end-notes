(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{585:function(t,a,s){"use strict";s.r(a);var e=s(13),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"必会git"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#必会git"}},[t._v("#")]),t._v(" 必会Git")]),t._v(" "),s("h2",{attrs:{id:"常用git命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常用git命令"}},[t._v("#")]),t._v(" 常用git命令")]),t._v(" "),s("blockquote",[s("p",[s("a",{attrs:{href:"https://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("常用 Git 命令清单 - 阮一峰的网络日志"),s("OutboundLink")],1)]),t._v(" "),s("p",[s("img",{attrs:{src:"https://www.ruanyifeng.com/blogimg/asset/2015/bg2015120901.png",alt:"img"}})]),t._v(" "),s("ul",[s("li",[t._v("Workspace：工作区")]),t._v(" "),s("li",[t._v("Index / Stage：暂存区")]),t._v(" "),s("li",[t._v("Repository：仓库区（或本地仓库）")]),t._v(" "),s("li",[t._v("Remote：远程仓库")])])]),t._v(" "),s("h2",{attrs:{id:"基本概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本概念"}},[t._v("#")]),t._v(" 基本概念")]),t._v(" "),s("h3",{attrs:{id:"git的配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git的配置"}},[t._v("#")]),t._v(" git的配置")]),t._v(" "),s("blockquote",[s("p",[s("a",{attrs:{href:"https://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("常用 Git 命令清单 - 阮一峰的网络日志"),s("OutboundLink")],1)])]),t._v(" "),s("p",[t._v("git修改Git的设置文件为"),s("code",[t._v(".gitconfig")]),t._v("，它可以在——")]),t._v(" "),s("ul",[s("li",[t._v("用户主目录下（全局配置）")]),t._v(" "),s("li",[t._v("也可以在项目目录下（项目配置）。")])]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 显示当前的Git配置")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --list\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config -l\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 编辑Git配置文件")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config -e "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--global"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 设置提交代码时的用户信息")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--global"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" user.name "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"[name]"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--global"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" user.email "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"[email address]"')]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 关联远程仓库")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" origin 远程仓库地址\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 例子")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" origin git@gitee.com:lang-tian/java-eedemo.git\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 设置默认推送仓库 这样每次都可以直接git push而不用选择分支")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push -u origin 分支\n")])])]),s("h3",{attrs:{id:"修改、配置、查看用户信息"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#修改、配置、查看用户信息"}},[t._v("#")]),t._v(" 修改、配置、查看用户信息")]),t._v(" "),s("p",[t._v("公司的代码仓库不会允许公司之外的用户向仓库提交代码，所以我们要局部配置用户信息，证明我们是自己人！")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("注意这里使用 "),s("code",[t._v('git config user.name "myName"')]),t._v("配置用户之后 committer_name为"),s("code",[t._v("“myName”")])]),t._v("！！")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/su-fangzhou/blog-image/raw/master/202202071604610.png",alt:"image-20220207160403543"}})]),t._v(" "),s("p",[t._v("但是一般公司要求为——")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/su-fangzhou/blog-image/raw/master/202202071609185.png",alt:"image-20220207160921124"}})]),t._v(" "),s("p",[s("strong",[t._v("要的是"),s("code",[t._v("myName")]),t._v(" 没有引号！")])]),t._v(" "),s("p",[t._v("所以 根据需要进行用户信息的配置~")])]),t._v(" "),s("blockquote",[s("p",[s("code",[t._v('git commit --amend --author="author名称 <emial详情>" --no-edit')]),t._v("用于更改最近一条的错误committer_name & committer_email")])]),t._v(" "),s("ul",[s("li",[t._v("查看（局部）配置\n"),s("ul",[s("li",[t._v("要查看全局的配置使用 "),s("code",[t._v("git config --list")])])])])]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config user.name\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config user.email\n")])])]),s("ul",[s("li",[t._v("局部配置")])]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config user.name "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"username"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config user.email "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"email"')]),t._v("\n")])])]),s("ul",[s("li",[t._v("全局配置")])]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global user.name "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"username"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global user.email "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"email"')]),t._v("\n")])])]),s("ul",[s("li",[t._v("局部修改")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("git config "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("replace"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("all user"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')]),t._v("\ngit config "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("replace"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("all user"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("email "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"@x.com"')]),t._v("\n")])])]),s("h3",{attrs:{id:""}},[s("a",{staticClass:"header-anchor",attrs:{href:"#"}},[t._v("#")])]),t._v(" "),s("h2",{attrs:{id:"_3个步骤"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3个步骤"}},[t._v("#")]),t._v(" 3个步骤")]),t._v(" "),s("p",[s("img",{attrs:{src:"%E5%BF%85%E4%BC%9AGit.assets/bVYnEY.png",alt:"clipboard.png"}})]),t._v(" "),s("p",[t._v("正常情况下，我们的工作流就是"),s("code",[t._v("3")]),t._v("个步骤，对应上图中的"),s("code",[t._v("3")]),t._v("个箭头线：")]),t._v(" "),s("div",{staticClass:"language-avrasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('git add .\ngit commit -m "comment"\ngit push\n')])])]),s("ol",[s("li",[s("code",[t._v("git add .")]),t._v("把所有文件放入"),s("code",[t._v("暂存区")]),t._v("；")]),t._v(" "),s("li",[s("code",[t._v("git commit")]),t._v("把所有文件从"),s("code",[t._v("暂存区")]),t._v("提交进"),s("code",[t._v("本地仓库")]),t._v("；")]),t._v(" "),s("li",[s("code",[t._v("git push")]),t._v("把所有文件从"),s("code",[t._v("本地仓库")]),t._v("推送进"),s("code",[t._v("远程仓库")]),t._v("。")])]),t._v(" "),s("h2",{attrs:{id:"_4个区"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4个区"}},[t._v("#")]),t._v(" 4个区")]),t._v(" "),s("p",[s("code",[t._v("git")]),t._v("之所以令人费解，主要是它相比于"),s("code",[t._v("svn")]),t._v("等等传统的版本管理工具，多引入了一个"),s("strong",[t._v("暂存区")]),t._v("("),s("code",[t._v("Stage")]),t._v(")的概念，就因为多了这一个概念，而使很多人疑惑。其实，在初学者来说，每个区具体怎么工作的，我们完全不需要关心，而只要知道有这么"),s("code",[t._v("4")]),t._v("个区就够了：")]),t._v(" "),s("ul",[s("li",[t._v("工作区("),s("code",[t._v("Working Area")]),t._v(")")]),t._v(" "),s("li",[t._v("暂存区("),s("code",[t._v("Stage")]),t._v(")")]),t._v(" "),s("li",[t._v("本地仓库("),s("code",[t._v("Local Repository")]),t._v(")")]),t._v(" "),s("li",[t._v("远程仓库("),s("code",[t._v("Remote Repository")]),t._v(")")])]),t._v(" "),s("h2",{attrs:{id:"_5种状态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5种状态"}},[t._v("#")]),t._v(" 5种状态")]),t._v(" "),s("p",[t._v("以上"),s("code",[t._v("4")]),t._v("个区，进入每一个区成功之后会产生一个状态，再加上最初始的一个状态，一共是"),s("code",[t._v("5")]),t._v("种状态。以下我们把这"),s("code",[t._v("5")]),t._v("种状态分别命名为：")]),t._v(" "),s("ul",[s("li",[t._v("未修改("),s("code",[t._v("Origin")]),t._v(")")]),t._v(" "),s("li",[t._v("已修改("),s("code",[t._v("Modified")]),t._v(")")]),t._v(" "),s("li",[t._v("已暂存("),s("code",[t._v("Staged")]),t._v(")")]),t._v(" "),s("li",[t._v("已提交("),s("code",[t._v("Committed")]),t._v(")")]),t._v(" "),s("li",[t._v("已推送("),s("code",[t._v("Pushed")]),t._v(")")])]),t._v(" "),s("h2",{attrs:{id:"检查修改"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#检查修改"}},[t._v("#")]),t._v(" 检查修改")]),t._v(" "),s("p",[t._v("了解了基本概念之后，我们来谈一谈犯错误之后如何撤销的问题。首先，我们要了解如何检查这"),s("code",[t._v("3")]),t._v("个步骤当中每一个步骤修改了什么，然后才好判断有没有修改成功。检查修改的二级命令都相同，都是"),s("code",[t._v("diff")]),t._v("，只是参数有所不同。")]),t._v(" "),s("h2",{attrs:{id:"已修改-未暂存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#已修改-未暂存"}},[t._v("#")]),t._v(" 已修改，未暂存")]),t._v(" "),s("div",{staticClass:"language-ebnf extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ebnf"}},[s("code",[s("span",{pre:!0,attrs:{class:"token rule"}},[t._v("git diff")]),t._v("\n")])])]),s("p",[t._v("首先，我们来看一下，如果我们只是简单地在浏览器里保存了一下文件，但是还没有做"),s("code",[t._v("git add .")]),t._v("之前，我们如何检查有哪些修改。我们先随便拿一个文件来做一下实验：")]),t._v(" "),s("p",[s("img",{attrs:{src:"http://r9cclbbs3.hn-bkt.clouddn.com/20220214153119.png",alt:"clipboard.png"}})]),t._v(" "),s("p",[t._v("我们在文件开头的第"),s("code",[t._v("2")]),t._v("行胡乱加了"),s("code",[t._v("4")]),t._v("个数字"),s("code",[t._v("1234")]),t._v("，存盘，这时文件进入了"),s("code",[t._v("已修改")]),t._v("状态，但是还没有进入"),s("code",[t._v("暂存区")]),t._v("，我们运行"),s("code",[t._v("git diff")]),t._v("，结果如下：")]),t._v(" "),s("div",{staticClass:"language-diff extra-class"},[s("pre",{pre:!0,attrs:{class:"language-diff"}},[s("code",[t._v("diff --git a/index.md b/index.md\nindex 73ff1ba..1066758 100644\n"),s("span",{pre:!0,attrs:{class:"token coord"}},[t._v("--- a/index.md")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token coord"}},[t._v("+++ b/index.md")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token coord"}},[t._v("@@ -1,5 +1,5 @@")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token unchanged"}},[s("span",{pre:!0,attrs:{class:"token prefix unchanged"}},[t._v(" ")]),s("span",{pre:!0,attrs:{class:"token line"}},[t._v("---\n")])]),s("span",{pre:!0,attrs:{class:"token deleted-sign deleted"}},[s("span",{pre:!0,attrs:{class:"token prefix deleted"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token line"}},[t._v("layout: main\n")])]),s("span",{pre:!0,attrs:{class:"token inserted-sign inserted"}},[s("span",{pre:!0,attrs:{class:"token prefix inserted"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token line"}},[t._v("1234layout: main\n")])]),s("span",{pre:!0,attrs:{class:"token unchanged"}},[s("span",{pre:!0,attrs:{class:"token prefix unchanged"}},[t._v(" ")]),s("span",{pre:!0,attrs:{class:"token line"}},[t._v("color: black\n")]),s("span",{pre:!0,attrs:{class:"token prefix unchanged"}},[t._v(" ")]),s("span",{pre:!0,attrs:{class:"token line"}},[t._v("---\n")])])])])]),s("p",[s("code",[t._v("git diff")]),t._v("的结果告诉我们哪些文件已经做了哪些修改。")]),t._v(" "),s("h2",{attrs:{id:"已暂存-未提交"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#已暂存-未提交"}},[t._v("#")]),t._v(" 已暂存，未提交")]),t._v(" "),s("div",{staticClass:"language-ada extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ada"}},[s("code",[s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("diff")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--cached")]),t._v("\n")])])]),s("p",[t._v("现在我们把修改放入"),s("code",[t._v("暂存区")]),t._v("看一下。先执行"),s("code",[t._v("git add .")]),t._v("，然后执行"),s("code",[t._v("git diff")]),t._v("，你会发现没有任何结果：")]),t._v(" "),s("p",[s("img",{attrs:{src:"http://r9cclbbs3.hn-bkt.clouddn.com/20220214153126.png",alt:"clipboard.png"}})]),t._v(" "),s("p",[t._v("这说明"),s("code",[t._v("git diff")]),t._v("这个命令只检查我们的"),s("code",[t._v("工作区")]),t._v("和"),s("code",[t._v("暂存区")]),t._v("之间的差异，如果我们想看到"),s("code",[t._v("暂存区")]),t._v("和"),s("code",[t._v("本地仓库")]),t._v("之间的差异，就需要加一个参数"),s("code",[t._v("git diff --cached")]),t._v("：")]),t._v(" "),s("div",{staticClass:"language-diff extra-class"},[s("pre",{pre:!0,attrs:{class:"language-diff"}},[s("code",[t._v("diff --git a/index.md b/index.md\nindex 73ff1ba..1066758 100644\n"),s("span",{pre:!0,attrs:{class:"token coord"}},[t._v("--- a/index.md")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token coord"}},[t._v("+++ b/index.md")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token coord"}},[t._v("@@ -1,5 +1,5 @@")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token unchanged"}},[s("span",{pre:!0,attrs:{class:"token prefix unchanged"}},[t._v(" ")]),s("span",{pre:!0,attrs:{class:"token line"}},[t._v("---\n")])]),s("span",{pre:!0,attrs:{class:"token deleted-sign deleted"}},[s("span",{pre:!0,attrs:{class:"token prefix deleted"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token line"}},[t._v("layout: main\n")])]),s("span",{pre:!0,attrs:{class:"token inserted-sign inserted"}},[s("span",{pre:!0,attrs:{class:"token prefix inserted"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token line"}},[t._v("1234layout: main\n")])]),s("span",{pre:!0,attrs:{class:"token unchanged"}},[s("span",{pre:!0,attrs:{class:"token prefix unchanged"}},[t._v(" ")]),s("span",{pre:!0,attrs:{class:"token line"}},[t._v("color: black\n")]),s("span",{pre:!0,attrs:{class:"token prefix unchanged"}},[t._v(" ")]),s("span",{pre:!0,attrs:{class:"token line"}},[t._v("---\n")])])])])]),s("p",[t._v("这时候我们看到的差异是"),s("code",[t._v("暂存区")]),t._v("和"),s("code",[t._v("本地仓库")]),t._v("之间的差异。")]),t._v(" "),s("h2",{attrs:{id:"已提交-未推送"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#已提交-未推送"}},[t._v("#")]),t._v(" 已提交，未推送")]),t._v(" "),s("div",{staticClass:"language-crmsh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("git diff master origin/master\n")])])]),s("p",[t._v("现在，我们把修改从"),s("code",[t._v("暂存区")]),t._v("提交到"),s("code",[t._v("本地仓库")]),t._v("，再看一下差异。先执行"),s("code",[t._v("git commit")]),t._v("，然后再执行"),s("code",[t._v("git diff --cached")]),t._v("，没有差异，执行"),s("code",[t._v("git diff master origin/master")]),t._v("，可以看到差异：")]),t._v(" "),s("p",[s("img",{attrs:{src:"http://r9cclbbs3.hn-bkt.clouddn.com/20220214153131.png",alt:"clipboard.png"}})]),t._v(" "),s("p",[t._v("在这里，"),s("code",[t._v("master")]),t._v("就是你的"),s("code",[t._v("本地仓库")]),t._v("，而"),s("code",[t._v("origin/master")]),t._v("就是你的"),s("code",[t._v("远程仓库")]),t._v("，"),s("code",[t._v("master")]),t._v("是主分支的意思，因为我们都在主分支上工作，所以这里两边都是"),s("code",[t._v("master")]),t._v("，而"),s("code",[t._v("origin")]),t._v("就代表远程。")]),t._v(" "),s("h2",{attrs:{id:"撤销修改"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#撤销修改"}},[t._v("#")]),t._v(" 撤销修改")]),t._v(" "),s("p",[t._v("了解清楚如何检查各种修改之后，我们开始尝试各种撤销操作。")]),t._v(" "),s("h2",{attrs:{id:"已修改-未暂存-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#已修改-未暂存-2"}},[t._v("#")]),t._v(" 已修改，未暂存")]),t._v(" "),s("p",[t._v("如果我们只是在编辑器里修改了文件，但还没有执行"),s("code",[t._v("git add .")]),t._v("，这时候我们的文件还在"),s("code",[t._v("工作区")]),t._v("，并没有进入"),s("code",[t._v("暂存区")]),t._v("，我们可以用：")]),t._v(" "),s("div",{staticClass:"language-erlang extra-class"},[s("pre",{pre:!0,attrs:{class:"language-erlang"}},[s("code",[s("span",{pre:!0,attrs:{class:"token atom"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token atom"}},[t._v("checkout")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n")])])]),s("p",[t._v("或者")]),t._v(" "),s("div",{staticClass:"language-pgsql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("git reset --hard\n")])])]),s("p",[t._v("来进行撤销操作。")]),t._v(" "),s("p",[s("img",{attrs:{src:"%E5%BF%85%E4%BC%9AGit.assets/bVYnLO.png",alt:"clipboard.png"}})]),t._v(" "),s("p",[t._v("可以看到，在执行完"),s("code",[t._v("git checkout .")]),t._v("之后，修改已被撤销，"),s("code",[t._v("git diff")]),t._v("没有任何内容了。")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("一对反义词")]),t._v(" "),s("code",[t._v("git add .")]),t._v("的反义词是"),s("code",[t._v("git checkout .")]),t._v("。做完修改之后，如果你想向前走一步，让修改进入"),s("code",[t._v("暂存区")]),t._v("，就执行"),s("code",[t._v("git add .")]),t._v("，如果你想向后退一步，撤销刚才的修改，就执行"),s("code",[t._v("git checkout .")]),t._v("。")])]),t._v(" "),s("h2",{attrs:{id:"已暂存-未提交-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#已暂存-未提交-2"}},[t._v("#")]),t._v(" 已暂存，未提交")]),t._v(" "),s("p",[t._v("你已经执行了"),s("code",[t._v("git add .")]),t._v("，但还没有执行"),s("code",[t._v('git commit -m "comment"')]),t._v("。这时候你意识到了错误，想要撤销，你可以执行：")]),t._v(" "),s("div",{staticClass:"language-erlang extra-class"},[s("pre",{pre:!0,attrs:{class:"language-erlang"}},[s("code",[s("span",{pre:!0,attrs:{class:"token atom"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token atom"}},[t._v("reset")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token atom"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token atom"}},[t._v("checkout")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n")])])]),s("p",[t._v("或者")]),t._v(" "),s("div",{staticClass:"language-pgsql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("git reset --hard\n")])])]),s("p",[s("code",[t._v("git reset")]),t._v("只是把修改退回到了"),s("code",[t._v("git add .")]),t._v("之前的状态，也就是说文件本身还处于"),s("code",[t._v("已修改未暂存")]),t._v("状态，你如果想退回"),s("code",[t._v("未修改")]),t._v("状态，还需要执行"),s("code",[t._v("git checkout .")]),t._v("。")]),t._v(" "),s("p",[t._v("或许你已经注意到了，以上两个步骤都可以用同一个命令"),s("code",[t._v("git reset --hard")]),t._v("来完成。是的，就是这个强大的命令，可以一步到位地把你的修改完全恢复到"),s("code",[t._v("未修改")]),t._v("的状态。")]),t._v(" "),s("h2",{attrs:{id:"已提交-未推送-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#已提交-未推送-2"}},[t._v("#")]),t._v(" 已提交，未推送")]),t._v(" "),s("p",[t._v("你的手太快，你既执行了"),s("code",[t._v("git add .")]),t._v("，又执行了"),s("code",[t._v("git commit")]),t._v("，这时候你的代码已经进入了你的"),s("code",[t._v("本地仓库")]),t._v("，然而你后悔了，怎么办？不要着急，还有办法。")]),t._v(" "),s("div",{staticClass:"language-maxima extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("git reset --hard origin/master\n")])])]),s("p",[t._v("还是这个"),s("code",[t._v("git reset --hard")]),t._v("命令，只不过这次多了一个参数"),s("code",[t._v("origin/master")]),t._v("，正如我们上面讲过的，"),s("code",[t._v("origin/master")]),t._v("代表"),s("code",[t._v("远程仓库")]),t._v("，既然你已经污染了你的"),s("code",[t._v("本地仓库")]),t._v("，那么就从"),s("code",[t._v("远程仓库")]),t._v("把代码取回来吧。")]),t._v(" "),s("h2",{attrs:{id:"已推送"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#已推送"}},[t._v("#")]),t._v(" 已推送")]),t._v(" "),s("p",[t._v("很不幸，你的手实在是太快了，你既"),s("code",[t._v("git add")]),t._v("了，又"),s("code",[t._v("git commit")]),t._v("了，并且还"),s("code",[t._v("git push")]),t._v("了，这时你的代码已经进入"),s("code",[t._v("远程仓库")]),t._v("。如果你想恢复的话，还好，由于你的"),s("code",[t._v("本地仓库")]),t._v("和"),s("code",[t._v("远程仓库")]),t._v("是等价的，你只需要先恢复"),s("code",[t._v("本地仓库")]),t._v("，再强制"),s("code",[t._v("push")]),t._v("到"),s("code",[t._v("远程仓库")]),t._v("就好了：")]),t._v(" "),s("div",{staticClass:"language-maxima extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("git reset --hard HEAD^\ngit push -f\n")])])]),s("p",[s("img",{attrs:{src:"%E5%BF%85%E4%BC%9AGit.assets/bVYnWc.png",alt:"clipboard.png"}})]),t._v(" "),s("h3",{attrs:{id:"强制覆盖-撤销-已经提交到远程仓库的无用的commit【慎用-】"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#强制覆盖-撤销-已经提交到远程仓库的无用的commit【慎用-】"}},[t._v("#")]),t._v(" 强制覆盖（撤销）已经提交到远程仓库的无用的commit【慎用！】")]),t._v(" "),s("blockquote",[s("p",[s("a",{attrs:{href:"https://blog.csdn.net/qq_42764468/article/details/122134247",target:"_blank",rel:"noopener noreferrer"}},[t._v("Git 撤销远程仓库的提交（push）和本地仓库的提交（commit）"),s("OutboundLink")],1)]),t._v(" "),s("p",[s("strong",[t._v("强制提交提交这个操作之前要问下仓库管理者能不能这样操作，我负责那个项目的前辈给我的指示是——“脏记录没关系，别用"),s("code",[t._v("push –force")]),t._v("”")])]),t._v(" "),s("p",[t._v("注意下 "),s("code",[t._v("git push –force")]),t._v("的概念，ta比较暴力——")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 强行推送当前分支到远程仓库，即使有冲突")]),t._v("\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("remote"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" --force\n")])])])]),t._v(" "),s("h2",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),s("p",[t._v("以上"),s("code",[t._v("4")]),t._v("种状态的撤销我们都用到了同一个命令"),s("code",[t._v("git reset --hard")]),t._v("，前"),s("code",[t._v("2")]),t._v("种状态的用法甚至完全一样，所以只要掌握了"),s("code",[t._v("git reset --hard")]),t._v("这个命令的用法，从此你再也不用担心提交错误了。")]),t._v(" "),s("h2",{attrs:{id:"多人开发"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#多人开发"}},[t._v("#")]),t._v(" 多人开发")]),t._v(" "),s("h3",{attrs:{id:"一、在远程服务器上创建一个共享版本库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、在远程服务器上创建一个共享版本库"}},[t._v("#")]),t._v(" 一、在远程服务器上创建一个共享版本库")]),t._v(" "),s("p",[t._v("1.项目负责人打开远程的服务器，然后创建一个工作区")]),t._v(" "),s("p",[t._v("2.在远程的服务器上打开工作区，在工作区中打开Git终端工具")]),t._v(" "),s("p",[t._v("3.在Git终端工具中输入"),s("code",[t._v("git init --bare")])]),t._v(" "),s("p",[t._v("4.经过以上几步，就代表远程服务器上的共享版本库已经创建好了")]),t._v(" "),s("h3",{attrs:{id:"二、开发人员下载远程版本库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、开发人员下载远程版本库"}},[t._v("#")]),t._v(" 二、开发人员下载远程版本库")]),t._v(" "),s("p",[t._v("1.开发人员在自己的电脑上打开Git终端工具")]),t._v(" "),s("p",[t._v("2.从远程的服务器上下载当前项目的共享版本库 "),s("code",[t._v("git clone")]),t._v(" 远程服务器共享版本库地址")]),t._v(" "),s("p",[t._v("和单人开发使用Git的区别:单人开发是自己创建版本库，而多人开发是从远程服务器下载版本库")]),t._v(" "),s("h3",{attrs:{id:"三、进入开发阶段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三、进入开发阶段"}},[t._v("#")]),t._v(" 三、进入开发阶段")]),t._v(" "),s("ol",[s("li",[t._v("和单人开发一样，设置用户名和邮箱")]),t._v(" "),s("li",[t._v("编写代码")]),t._v(" "),s("li",[s("code",[t._v("git add .")]),t._v("添加到暂缓区")]),t._v(" "),s("li",[s("code",[t._v("git commit -m")]),t._v("添加到"),s("strong",[t._v("HEADER")]),t._v("指针指向的分支")]),t._v(" "),s("li",[t._v("注意点:\n"),s("code",[t._v("commit")]),t._v("是将编写好的代码提交到本地的版本库，所以其它的开发人员是拿不到我们提交的代码的,如果想让其它开发人员也能拿到我们提交的代码，还必须将编写好的代码提交到远程的服务器\n多人开发特有")]),t._v(" "),s("li",[t._v("将代码提交到远程的服务器"),s("code",[t._v("git push")])]),t._v(" "),s("li",[t._v("其它的开发人员只需要通过"),s("code",[t._v("git pull")]),t._v("就可以拿到更新的代码了多人开发使用")])]),t._v(" "),s("blockquote",[s("p",[t._v("Git注意点:")]),t._v(" "),s("p",[t._v("1.不能将不能运行的代码提交到本地和远程服务器(切记一定不能)")]),t._v(" "),s("p",[t._v("2.先 git pull 把远程仓库的代码拉过来，（git pull会保存多个人有冲突的代码，小组决定留哪个，然后修改后再推送 git push）")])]),t._v(" "),s("h2",{attrs:{id:"git分支详解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git分支详解"}},[t._v("#")]),t._v(" Git分支详解")]),t._v(" "),s("h3",{attrs:{id:"git-branch命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-branch命令"}},[t._v("#")]),t._v(" git branch命令")]),t._v(" "),s("ul",[s("li",[t._v("查看分支 git branch")]),t._v(" "),s("li",[t._v("新建分支 git branch branch_name")]),t._v(" "),s("li",[t._v("切换分支 git checkout branch")]),t._v(" "),s("li",[t._v("查看远程服务器的分支 git branch -r")]),t._v(" "),s("li",[t._v("删除分支 git branch -d branch_name  (注意不能删除当前所在的分支)")]),t._v(" "),s("li",[t._v("更改分支名称 git branch -m old_name new_name")]),t._v(" "),s("li",[t._v("创建分支并切换到新创建的分支 git branch -b branch_name")]),t._v(" "),s("li",[t._v("合并分支 git merge branch_name")]),t._v(" "),s("li",[t._v("查看工作区与暂存区差异 git diff")]),t._v(" "),s("li",[t._v("查看提交历史 git log")]),t._v(" "),s("li",[t._v("封存当前暂存区修改 git stash")]),t._v(" "),s("li",[t._v("查看当前保存内容 git stash list")]),t._v(" "),s("li",[t._v("提取暂存区 git stash apply stash@{0}")])]),t._v(" "),s("h3",{attrs:{id:"如何创建个分支"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何创建个分支"}},[t._v("#")]),t._v(" 如何创建个分支")]),t._v(" "),s("p",[t._v("1.可以通过"),s("code",[t._v("git branch")]),t._v("指令查看当前仓库的分支")]),t._v(" "),s("ul",[s("li",[t._v("注意点:如果是一个空的仓库，那么什么都不会输出")])]),t._v(" "),s("p",[t._v("2.可以通过"),s("code",[t._v("git branch")]),t._v(" "),s("code",[t._v("分支名称")]),t._v(" 来创建一个新的分支")]),t._v(" "),s("p",[t._v("3.可以通过"),s("code",[t._v("git switch")]),t._v(" 分支名称来切换分支")]),t._v(" "),s("ul",[s("li",[t._v("注意点:通过git branch查看分支，哪一个分支前面有*****号，就代表当前通过commit是将代码提交到了哪")]),t._v(" "),s("li",[t._v("也就是说*号指向谁，就代表HEADER指针指向谁")])]),t._v(" "),s("h3",{attrs:{id:"如何将分支提交到远程服务器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何将分支提交到远程服务器"}},[t._v("#")]),t._v(" 如何将分支提交到远程服务器")]),t._v(" "),s("p",[t._v("1.可以通过 "),s("code",[t._v("git branch -r")]),t._v(" 指令查看远程仓库有哪些分支")]),t._v(" "),s("p",[t._v("2.首先切换到新建的分支，然后在新建的分支中通过 g"),s("code",[t._v("it push -set -upstream origin 分支名称")])]),t._v(" "),s("h3",{attrs:{id:"如何合并分支"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何合并分支"}},[t._v("#")]),t._v(" 如何合并分支")]),t._v(" "),s("p",[t._v("1.可以通过"),s("code",[t._v("git merge 分支名称")]),t._v("指令来合并分支")]),t._v(" "),s("blockquote",[s("p",[t._v("例如:当前我们在"),s("strong",[t._v("master")]),t._v("分支中使用")])]),t._v(" "),s("p",[s("code",[t._v("git merge Dev")]),t._v(" 就代表需要将Dev分支中的代码合并到master分支中")]),t._v(" "),s("h3",{attrs:{id:"如何删除分支"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何删除分支"}},[t._v("#")]),t._v(" 如何删除分支")]),t._v(" "),s("p",[t._v("1.可以通过"),s("code",[t._v("git branch -d 分支名称")]),t._v(" 指令删除指定的分支\n注意点:"),s("strong",[t._v("以上指令仅仅是删除本地的分支，并不会删除远程服务器上的分支")])]),t._v(" "),s("p",[t._v("2.可以通过"),s("code",[t._v("git push origin --delete 分支名称")]),t._v(" 指令删除远程服务器上指定的分支")]),t._v(" "),s("h3",{attrs:{id:"工作流"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#工作流"}},[t._v("#")]),t._v(" 工作流")]),t._v(" "),s("blockquote",[s("p",[t._v("分工")])]),t._v(" "),s("p",[s("img",{attrs:{src:"http://r9cclbbs3.hn-bkt.clouddn.com/20220214163500.png",alt:"image-20220214163458060"}})]),t._v(" "),s("blockquote",[s("p",[t._v("测试 和 修复bug")])]),t._v(" "),s("p",[s("img",{attrs:{src:"http://r9cclbbs3.hn-bkt.clouddn.com/20220214163606.png",alt:"image-20220214163604310"}})]),t._v(" "),s("blockquote",[s("p",[t._v("上线")])]),t._v(" "),s("p",[s("img",{attrs:{src:"http://r9cclbbs3.hn-bkt.clouddn.com/20220214163856.png",alt:"image-20220214163855214"}})]),t._v(" "),s("p",[t._v("切换到主分支Master "),s("code",[t._v("git switch Master")])]),t._v(" "),s("p",[t._v("打标记 "),s("code",[t._v('git tag -a v1.0 -m "XXXXX"')])]),t._v(" "),s("p",[t._v("推送 "),s("code",[t._v("git push origin v1.0")]),t._v("    v1.0是项目名")]),t._v(" "),s("p",[t._v("可以查看该版本的信息 "),s("code",[t._v("git show v1.0")])]),t._v(" "),s("blockquote",[s("p",[t._v("上线之后")])]),t._v(" "),s("p",[s("img",{attrs:{src:"http://r9cclbbs3.hn-bkt.clouddn.com/20220214164420.png",alt:"image-20220214164418612"}})]),t._v(" "),s("h2",{attrs:{id:"代码仓库相关规范"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#代码仓库相关规范"}},[t._v("#")]),t._v(" 代码仓库相关规范")]),t._v(" "),s("h3",{attrs:{id:"分支管理-gitflow工作流概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分支管理-gitflow工作流概述"}},[t._v("#")]),t._v(" 分支管理 "),s("code",[t._v("Gitflow")]),t._v("工作流概述")]),t._v(" "),s("blockquote",[s("p",[t._v("一个功能一个分支，写完了一个功能就提pr 提完pr就删除分支~")]),t._v(" "),s("p",[t._v("技术指导："),s("a",{attrs:{href:"https://github.com/xirong/my-git/blob/master/git-workflow-tutorial.md#236-%E7%A4%BA%E4%BE%8B",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("my-git/git-workflow-tutorial.md at master · xirong/my-git (github.com)")]),s("OutboundLink")],1)])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/su-fangzhou/blog-image/raw/master/202201141843069.png",alt:"image-20220114184351013"}})]),t._v(" "),s("p",[t._v("我们假设a与b协作完成一个任务")]),t._v(" "),s("p",[t._v("【1】先创建一个develop分支")]),t._v(" "),s("blockquote",[s("p",[t._v("精神分裂式开发模式开启！")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/su-fangzhou/blog-image/raw/master/202202021744900.png",alt:"image-20220202174435852"}})]),t._v(" "),s("p",[t._v("第一步为"),s("code",[t._v("master")]),t._v("分支配套一个"),s("code",[t._v("develop")]),t._v("分支。简单来做可以"),s("a",{attrs:{href:"https://www.atlassian.com/git/tutorial/git-branches#!branch",target:"_blank",rel:"noopener noreferrer"}},[t._v("本地创建一个空的"),s("code",[t._v("develop")]),t._v("分支 "),s("OutboundLink")],1),t._v("，"),s("code",[t._v("push")]),t._v("到服务器上：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch develop\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push -u origin develop\n")])])]),s("p",[t._v("以后这个分支将会包含了项目的全部历史，而"),s("code",[t._v("master")]),t._v("分支将只包含了部分历史。其它开发者这时应该"),s("a",{attrs:{href:"https://www.atlassian.com/git/tutorial/git-basics#!clone",target:"_blank",rel:"noopener noreferrer"}},[t._v("克隆中央仓库 "),s("OutboundLink")],1),t._v("，建好"),s("code",[t._v("develop")]),t._v("分支的跟踪分支：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clone ssh://user@host/path/to/repo.git\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout -b develop origin/develop\n")])])]),s("p",[t._v("现在每个开发都有了这些历史分支的本地拷贝。")]),t._v(" "),s("p",[t._v("【2】举例：a创建一个功能分支负责写一下CSS，初始化一下项目，")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout -b some-feature develop\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" status\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("some-file"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit\n")])])]),s("p",[t._v("写完之后推到develop中 然后删除功能分支")]),t._v(" "),s("blockquote",[s("p",[t._v("个人感觉：功能分支的作用-划分功能时比较清晰且review代码时更加一目了然。想象一下，直接在develop上开发大家就没法每天在自己的分支上进行提交了！这版本该有多混乱！")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/su-fangzhou/blog-image/raw/master/202201141844593.png",alt:"image-20220114184343296"}})]),t._v(" "),s("blockquote",[s("p",[t._v("注意develop上面的版本应该是一个稳定可运行的版本，功能分支推给develop分支的版本应该较完善才对！")])]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" pull origin develop\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout develop\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merge some-feature\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch -d some-feature\n")])])]),s("p",[t._v("【3】举例：b也基于develop创建一个功能分支，进行项目核心功能的开发~与【2】的流程同理")]),t._v(" "),s("blockquote",[s("p",[t._v("疑问：那再来一拨人开发不太相干的内容是否需要再搞一个develop2出来呢？还是说再搞一个功能分支出来？")])]),t._v(" "),s("p",[t._v("【4】进行发布 涉及到release层")]),t._v(" "),s("p",[t._v("等两边分别开发得差不多了就整一个release")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout -b release-0.1 develop\n")])])]),s("p",[t._v("这个分支是清理发布、执行所有测试、更新文档和其它为下个"),s("strong",[t._v("发布")]),t._v("做准备操作的地方，像是一个专门用于改善发布的功能分支。")]),t._v(" "),s("p",[t._v("【5】完成发布 将修改合并到main分支")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout main\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merge release-0.1\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout develop\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merge release-0.1\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch -d release-0.1\n")])])]),s("p",[t._v("【6】特殊情况——比如：修改之前版本的问题")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout -b issue-"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#001 main")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Fix the bug")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout main\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merge issue-"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#001")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push\n")])])]),s("p",[t._v("就像发布分支，维护分支中新加这些重要修改需要包含到"),s("code",[t._v("develop")]),t._v("分支中，所以要再在develop执行一个合并操作。然后就可以安全地"),s("a",{attrs:{href:"https://www.atlassian.com/git/tutorial/git-branches#!branch",target:"_blank",rel:"noopener noreferrer"}},[t._v("删除这个分支 "),s("OutboundLink")],1),t._v("了：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout develop\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merge issue-"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#001")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch -d issue-"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#001")]),t._v("\n")])])]),s("h3",{attrs:{id:"commit命名规范"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#commit命名规范"}},[t._v("#")]),t._v(" commit命名规范")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'feat'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 新功能 feature")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fix'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 一个错误修复")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'refactor'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 重构(既不增加新功能，也不是修复bug)")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'docs'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 仅文档更改")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'test'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 添加缺失的测试或更正现有的测试")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'chore'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 既不修正错误也不增加功能的代码更改")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'style'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 不影响代码含义的更改（空白，格式，缺少分号等）")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'perf'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 改进性能的代码更改")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'revert'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 回退")]),t._v("\n    \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// eg: 'feat: 添加了图表功能'")]),t._v("\n")])])]),s("h3",{attrs:{id:"推代码之前要先拉取-在同一个分支上开发-子分支拉父分支"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#推代码之前要先拉取-在同一个分支上开发-子分支拉父分支"}},[t._v("#")]),t._v(" 推代码之前要先拉取（在同一个分支上开发/子分支拉父分支）")]),t._v(" "),s("blockquote",[s("p",[s("a",{attrs:{href:"https://blog.csdn.net/weixin_45162906/article/details/119930857",target:"_blank",rel:"noopener noreferrer"}},[t._v("git push时出现的Merge branch ‘xxx‘ into ‘xxx‘"),s("OutboundLink")],1)]),t._v(" "),s("p",[s("a",{attrs:{href:"https://blog.csdn.net/wm5920/article/details/79731983",target:"_blank",rel:"noopener noreferrer"}},[t._v("git解决merge branch_球球之家-CSDN博客 "),s("OutboundLink")],1),t._v("——解决方案——在push失败的时候，先pull，然后force rebase再push即可解决")])]),t._v(" "),s("p",[t._v("如果没养成这种习惯，会导致git log中出现“Merge branch ”xxx” into “xxx” 这一条 不够规范！")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/su-fangzhou/blog-image/raw/master/202202071457471.png",alt:"image-20220207145737389"}})]),t._v(" "),s("h3",{attrs:{id:"合并代码的四种方式-merge-squash-rebase"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#合并代码的四种方式-merge-squash-rebase"}},[t._v("#")]),t._v(" 合并代码的四种方式-merge squash rebase")]),t._v(" "),s("blockquote",[s("p",[t._v("组内知识手册")])]),t._v(" "),s("p",[t._v("若评审通过后，根据合并策略的设置，确定是否需要自动合并到目标分支。")]),t._v(" "),s("ul",[s("li",[t._v("若合并策略勾选了允许评审通过后自动合并代码，则代码将会自动合入到目标分支；")]),t._v(" "),s("li",[t._v("若未勾选，则需要目标分支有权限的成员，根据需求，选择相应的合并方式进行手动合并； 我们提供四种合并方式：")])]),t._v(" "),s("p",[t._v("四种代码合并方式的定义")]),t._v(" "),s("p",[s("strong",[t._v("Merge")]),t._v("：这种方式会优先尝试fast-forward（快进）方式merge，若行不通，再尝试non-fast forward方式。"),s("strong",[t._v("默认方式")])]),t._v(" "),s("p",[s("strong",[t._v("Merge with non fast-forward")]),t._v("：采用non-fast forward方式merge，总是会在目标分支头部生成一个合并点。")]),t._v(" "),s("p",[s("strong",[t._v("Squash and merge")]),t._v("：将源分支上所有要合并的commits先汇合成一个commit，然后提交到目标分支头部。")]),t._v(" "),s("p",[s("strong",[t._v("Rebase and merge")]),t._v("：Rebase是一种变基操作，本质是将source branch的commits一个一个有序的cherry pick到目标分支头部，保留每个commit的内容但变更sha1。使目标分支的版本树看起来是一条线，简洁易读。")]),t._v(" "),s("p",[s("strong",[t._v("手动合并")]),t._v("选择页面如下图：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/su-fangzhou/blog-image/raw/master/202202071509313.png",alt:"image-20220207150906188"}})]),t._v(" "),s("p",[s("strong",[t._v("四种合并方式的定义与图解")])]),t._v(" "),s("h4",{attrs:{id:"_1-merge"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-merge"}},[t._v("#")]),t._v(" 1. Merge")]),t._v(" "),s("p",[t._v("这种方式会优先尝试fast-forward（快进）方式merge，若行不通，再尝试non-fast forward方式。这个方式是"),s("strong",[t._v("默认方式")]),t._v("。")]),t._v(" "),s("h5",{attrs:{id:"示例一-fast-forward方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#示例一-fast-forward方式"}},[t._v("#")]),t._v(" "),s("strong",[t._v("示例一：fast-forward方式")])]),t._v(" "),s("p",[t._v("如下图所示，bugfix分支从master分支branch out（切出来）。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/su-fangzhou/blog-image/raw/master/202202071511168.png",alt:"image-20220207151128103"}})]),t._v(" "),s("p",[t._v("合并bugfix分支到master分支时，master分支的状态"),s("strong",[t._v("没有被更新过")]),t._v('。 此时Merge会优先采用**"fast-forward"**（快进）方式，将master分支的head移动到bugfix分支的最新提交。merge后的版本树如下图：')]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/su-fangzhou/blog-image/raw/master/202202071511601.png",alt:"image-20220207151151534"}})]),t._v(" "),s("h5",{attrs:{id:"示例二-non-fast-forward方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#示例二-non-fast-forward方式"}},[t._v("#")]),t._v(" "),s("strong",[t._v("示例二：non-fast forward方式")])]),t._v(" "),s("p",[t._v("同样的，bugfix分支从master分支branch out，但此后"),s("strong",[t._v("master分支上有新的提交")]),t._v("。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/su-fangzhou/blog-image/raw/master/202202071521228.png",alt:"img"}})]),t._v(" "),s("p",[t._v('合并bugfix分支到master分支时，Merge会采用**"non-fast forward"**方式，在目标分支头部生成一个新的merge point '),s("code",[t._v("E")]),t._v("。merge结果如下图：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/su-fangzhou/blog-image/raw/master/202202071513954.png",alt:"image-20220207151336894"}})]),t._v(" "),s("h4",{attrs:{id:"_2-merge-with-non-fast-forward"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-merge-with-non-fast-forward"}},[t._v("#")]),t._v(" 2. Merge with non-fast forward")]),t._v(" "),s("p",[t._v("采用non-fast forward方式merge，总是会在目标分支头部生成一个merge point（合并点）。")]),t._v(" "),s("h5",{attrs:{id:"示例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#示例"}},[t._v("#")]),t._v(" "),s("strong",[t._v("示例：")])]),t._v(" "),s("p",[t._v("如下图，bugfix分支从master分支branch out，此后master分支"),s("strong",[t._v("没有再被更新过")]),t._v("。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/su-fangzhou/blog-image/raw/master/202202071518634.png",alt:"image-20220207151811570"}})]),t._v(" "),s("p",[t._v("采用non-fast forward方式合并bugfix分支到master分支时，会在目标分支master"),s("strong",[t._v("头部产生一个merge point "),s("code",[t._v("C")])]),t._v("。如下图示意：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/su-fangzhou/blog-image/raw/master/202202071518055.png",alt:"image-20220207151826999"}})]),t._v(" "),s("h4",{attrs:{id:"_3-squash-and-merge"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-squash-and-merge"}},[t._v("#")]),t._v(" 3. Squash and merge")]),t._v(" "),s("p",[t._v("将源分支上所有要合并的commits先汇合成一个commit，然后提交到目标分支头部。")]),t._v(" "),s("h5",{attrs:{id:"示例-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#示例-2"}},[t._v("#")]),t._v(" "),s("strong",[t._v("示例：")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/su-fangzhou/blog-image/raw/master/202202071521228.png",alt:"image-20220207152130148"}})]),t._v(" "),s("p",[t._v("采用squash方式合并bugfix分支到master分支时，bugfix分支的commitX和commitY会先被汇合成一个commit，然后被提交到master分支头部。如下图示：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/su-fangzhou/blog-image/raw/master/202202071522633.png",alt:"image-20220207152218543"}})]),t._v(" "),s("h4",{attrs:{id:"_4-rebase-and-merge"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-rebase-and-merge"}},[t._v("#")]),t._v(" 4. Rebase and merge")]),t._v(" "),s("blockquote",[s("p",[t._v("好文推荐，点出了很多应用场景"),s("a",{attrs:{href:"https://www.cnblogs.com/kidsitcn/p/5339382.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("git rebase vs git merge详解 - 世有因果知因求果 - 博客园 (cnblogs.com)"),s("OutboundLink")],1)])]),t._v(" "),s("p",[t._v("Rebase是一种变基操作，"),s("strong",[t._v("本质是将source branch的commits一个一个有序的cherry pick到目标分支头部")]),t._v("，保留每个commit的内容。使目标分支的版本树看起来是一条线，简洁易读。")]),t._v(" "),s("blockquote",[s("p",[t._v("cherry-pick即“摘樱桃”，使用该命令可以将任意的commit通过其commit号将其合并到你想要的分支上")])]),t._v(" "),s("h5",{attrs:{id:"示例-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#示例-3"}},[t._v("#")]),t._v(" "),s("strong",[t._v("示例：")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/su-fangzhou/blog-image/raw/master/202202071521228.png",alt:"image-20220207152130148"}})]),t._v(" "),s("p",[t._v("采用rebase方式合并bugfix分支到master分支时，bugfix分支的commitX和commitY会被有序的添加到master分支的头部。如图所示，master分支的历史记录成一条直线。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/su-fangzhou/blog-image/raw/master/202202071527612.png",alt:"image-20220207152709527"}})]),t._v(" "),s("h2",{attrs:{id:"经验汇总"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#经验汇总"}},[t._v("#")]),t._v(" 经验汇总")]),t._v(" "),s("blockquote",[s("p",[t._v("提交的时候失败了")])]),t._v(" "),s("p",[s("img",{attrs:{src:"http://r9cclbbs3.hn-bkt.clouddn.com/20220223151455.png",alt:"image-20220223151448427"}})]),t._v(" "),s("p",[t._v("那么找到原因了就好办了，只要将本地库和远程库同步就可以了")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" pull origin main --allow-unrelated-histories //从远端仓库拉去不相关历史\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin main //推送到远端main分支\n")])])]),s("p",[s("strong",[t._v("two：")]),t._v("\n那我就强制上传覆盖远程文件，")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push -f origin master\n")])])]),s("p",[t._v("(这个命令在团队开发的时候最好不要用,否则可能会有生命危险)")]),t._v(" "),s("h3",{attrs:{id:"代码规范"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#代码规范"}},[t._v("#")]),t._v(" 代码规范")]),t._v(" "),s("blockquote",[s("p",[t._v("这个交给"),s("code",[t._v("Eslint")]),t._v("就好了，组里前辈都把规范配置好了，用就完事了~")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/su-fangzhou/blog-image/raw/master/202202091924837.png",alt:"image-20220209192444646"}})])]),t._v(" "),s("h3",{attrs:{id:"业务组件的使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#业务组件的使用"}},[t._v("#")]),t._v(" 业务组件的使用")]),t._v(" "),s("blockquote",[s("p",[t._v("业务组件一般在View文件夹中")]),t._v(" "),s("p",[t._v("封装好的普适性组件一般在Components文件夹中")])]),t._v(" "),s("p",[t._v("在封装普适性组件时要全面考虑，这样在写业务组件时才会比较舒服~")]),t._v(" "),s("h3",{attrs:{id:"debug大型项目技巧"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#debug大型项目技巧"}},[t._v("#")]),t._v(" debug大型项目技巧")]),t._v(" "),s("blockquote",[s("p",[t._v("前置知识：ES6 React基本思想、一些基础钩子的用法")])]),t._v(" "),s("ul",[s("li",[t._v("找到问题所在页面，根据路由path "),s("code",[t._v("/xx/xx")]),t._v(" 找到对应的组件所在位置")]),t._v(" "),s("li",[t._v("拿到一个组件先一一对应页面与代码，并进行理解，定位问题的位置")]),t._v(" "),s("li",[t._v("找到有问题的组件， 要明白对应属性的概念并合理应用 传入值进去——\n"),s("ul",[s("li",[s("strong",[t._v("现成的组件库")]),t._v(" 打开官网 通过demo/API 理解用法 定位问题/添加需求")]),t._v(" "),s("li",[s("strong",[t._v("组内封装好的组件")]),t._v(" 理解其暴露出来的属性 并且顺着这些属性理解组件渲染出来的效果 并定位问题所在")])])]),t._v(" "),s("li",[t._v("最后 多干掉几个bug就有感觉了 慢慢来吧！")])]),t._v(" "),s("h2",{attrs:{id:"踩坑经验"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#踩坑经验"}},[t._v("#")]),t._v(" 踩坑经验")]),t._v(" "),s("h3",{attrs:{id:"退出git-log命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#退出git-log命令"}},[t._v("#")]),t._v(" 退出git log命令")]),t._v(" "),s("p",[t._v("啊好蠢的问题")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("输入q\n")])])]),s("h3",{attrs:{id:"防止平台崩溃用不了-做容错处理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#防止平台崩溃用不了-做容错处理"}},[t._v("#")]),t._v(" 防止平台崩溃用不了——做容错处理")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("如果后端返回的数据obj为"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" 则前端的代码中不要出现obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("xxx这种用法\n会导致平台整个用不了\n建议使用\nobj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("xxx ——逻辑与运算 —— 来做一个防范\n保证\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" list "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" api"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getList")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 防范返回值为null！")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// bad")]),t._v("\nlist"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("item")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" item\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// good")]),t._v("\nlist "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("item")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" item\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[s("img",{attrs:{src:"https://gitee.com/su-fangzhou/blog-image/raw/master/202202081808011.png",alt:"image-20220208180850940"}})])])}),[],!1,null,null,null);a.default=r.exports}}]);